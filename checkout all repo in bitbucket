#!/bin/bash

# Set your Bitbucket credentials
USERNAME="your-bitbucket-username"
APP_PASSWORD="your-bitbucket-app-password"
WORKSPACE="your-workspace"

# Get repository list from Bitbucket API
REPOS=$(curl -u "$USERNAME:$APP_PASSWORD" -s "https://api.bitbucket.org/2.0/repositories/$WORKSPACE?pagelen=100" | \
        grep -o '"https://bitbucket.org/[^"]*.git"' | sed 's/"//g')

# Clone each repository
for REPO in $REPOS; do
    echo "Cloning $REPO..."
    git clone "$REPO"
done

echo "âœ… All repositories cloned successfully!"




curl -u "BITBUCKET_USERNAME:BITBUCKET_APP_PASSWORD" \
     -s "https://api.bitbucket.org/2.0/repositories/YOUR_WORKSPACE?pagelen=100" | jq -r '.values[].links.clone[] | select(.name=="https") | .href'


  #!/bin/bash

USERNAME="your-bitbucket-username"
APP_PASSWORD="your-bitbucket-app-password"
WORKSPACE="your-workspace"

# Get list of repositories
REPOS=$(curl -u "$USERNAME:$APP_PASSWORD" -s "https://api.bitbucket.org/2.0/repositories/$WORKSPACE?pagelen=100" | jq -r '.values[].links.clone[] | select(.name=="https") | .href')

# Clone each repository
for REPO in $REPOS; do
    echo "Cloning $REPO..."
    git clone "$REPO"
done




chmod +x clone_bitbucket_repos.sh
./clone_bitbucket_repos.sh



  #!/bin/bash

WORKSPACE="your-workspace"
USERNAME="your-bitbucket-username"
APP_PASSWORD="your-bitbucket-app-password"

# Get list of repositories
REPOS=$(curl -u "$USERNAME:$APP_PASSWORD" -s "https://api.bitbucket.org/2.0/repositories/$WORKSPACE?pagelen=100" | jq -r '.values[].links.clone[] | select(.name=="ssh") | .href')

# Clone each repository
for REPO in $REPOS; do
    echo "Cloning $REPO..."
    git clone "$REPO"
done








import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.concurrent.*;

public class FileScanner {
    private static final int THREAD_POOL_SIZE = 10;

    public static void scanJavaFiles(String directoryPath, BlockingQueue<File> fileQueue) throws IOException {
        ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);

        Files.walk(Paths.get(directoryPath))
                .filter(path -> path.toString().endsWith(".java"))
                .forEach(path -> executor.execute(() -> fileQueue.add(path.toFile())));

        executor.shutdown();
    }
}


import java.io.File;
import java.io.FileInputStream;
import java.util.concurrent.BlockingQueue;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.expr.AnnotationExpr;

public class ParallelCodeAnalyzer implements Runnable {
    private final BlockingQueue<File> fileQueue;

    public ParallelCodeAnalyzer(BlockingQueue<File> fileQueue) {
        this.fileQueue = fileQueue;
    }

    @Override
    public void run() {
        while (true) {
            try {
                File file = fileQueue.take(); // Blocking call (waits if queue is empty)
                analyzeFile(file);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void analyzeFile(File file) {
        try (FileInputStream in = new FileInputStream(file)) {
            CompilationUnit cu = new JavaParser().parse(in).getResult().orElse(null);
            if (cu == null) return;

            cu.findFirst(ClassOrInterfaceDeclaration.class).ifPresent(clazz -> {
                String className = clazz.getNameAsString();
                List<String> annotations = clazz.getAnnotations().stream()
                        .map(AnnotationExpr::getNameAsString)
                        .toList();

                if (annotations.contains("Service")) {
                    System.out.println("Found Service: " + className);
                }
                if (annotations.contains("Controller") || annotations.contains("RestController")) {
                    System.out.println("Found Controller: " + className);
                }
                if (annotations.contains("Entity") || annotations.contains("Table")) {
                    System.out.println("Found Entity: " + className);
                }
            });

        } catch (Exception e) {
            System.err.println("Error processing file: " + file.getName() + " - " + e.getMessage());
        }
    }
}



import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileWriter;
import java.util.*;

public class JsonWriter {
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void writeToJsonFile(Map<String, Object> data, String filePath) {
        try (FileWriter writer = new FileWriter(new File(filePath))) {
            objectMapper.writerWithDefaultPrettyPrinter().writeValue(writer, data);
        } catch (Exception e) {
            System.err.println("Error writing JSON: " + e.getMessage());
        }
    }
}



import org.springframework.web.bind.annotation.*;
import java.io.File;
import java.util.*;
import java.util.concurrent.*;

@RestController
@RequestMapping("/analyze")
public class AnalysisController {
    private static final BlockingQueue<File> fileQueue = new LinkedBlockingQueue<>();
    private static final int THREAD_COUNT = 10;
    
    @GetMapping("/run")
    public Map<String, Object> analyzeCode(@RequestParam String sourcePath) {
        try {
            // Step 1: Start file scanning in parallel
            FileScanner.scanJavaFiles(sourcePath, fileQueue);

            // Step 2: Start worker threads to analyze files
            ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);
            for (int i = 0; i < THREAD_COUNT; i++) {
                executor.execute(new ParallelCodeAnalyzer(fileQueue));
            }
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.HOURS);

            // Step 3: Generate JSON Output
            Map<String, Object> result = new HashMap<>();
            result.put("status", "Completed");
            result.put("processedFiles", fileQueue.size());

            // Step 4: Write to JSON File
            JsonWriter.writeToJsonFile(result, "output.json");

            return result;
        } catch (Exception e) {
            return Map.of("error", "Failed to analyze source code: " + e.getMessage());
        }
    }
}
