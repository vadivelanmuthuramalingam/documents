package com.example.gracefulshutdown;

import jakarta.annotation.PreDestroy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.stream.binder.BindingService;
import org.springframework.cloud.stream.binder.ConsumerBinding;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.jms.listener.DefaultMessageListenerContainer;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.List;

@Configuration
public class GracefulShutdownManager {

    private static final Logger logger = LoggerFactory.getLogger(GracefulShutdownManager.class);

    private final BindingService bindingService;
    private final DataSource dataSource;
    private final List<DefaultMessageListenerContainer> mqListenerContainers;
    private final RedisConnectionFactory redisConnectionFactory;

    public GracefulShutdownManager(
            BindingService bindingService,
            DataSource dataSource,
            List<DefaultMessageListenerContainer> mqListenerContainers,
            RedisConnectionFactory redisConnectionFactory) {
        this.bindingService = bindingService;
        this.dataSource = dataSource;
        this.mqListenerContainers = mqListenerContainers;
        this.redisConnectionFactory = redisConnectionFactory;
    }

    @PreDestroy
    public void onSigterm() {
        logger.info("üö® SIGTERM received ‚Äî starting graceful shutdown...");

        stopSolaceConsumers();
        stopIbmmqListeners();
        closeOracleConnection();
        closeRedisConnection();

        logger.info("‚úÖ Graceful shutdown tasks completed. Exiting application.");
    }

    private void stopSolaceConsumers() {
        logger.info("üõë Stopping Solace consumers...");
        try {
            bindingService.getConsumerBindings()
                .values()
                .forEach(bindings -> bindings.forEach(binding -> {
                    try {
                        logger.info("Stopping Solace consumer binding: {}", binding.getName());
                        binding.stop();
                    } catch (Exception e) {
                        logger.error("‚ùå Error stopping Solace consumer: {}", binding.getName(), e);
                    }
                }));
        } catch (Exception ex) {
            logger.error("‚ùå Error during Solace consumers shutdown", ex);
        }
    }

    private void stopIbmmqListeners() {
        logger.info("üõë Stopping IBM MQ JMS listeners...");
        for (DefaultMessageListenerContainer container : mqListenerContainers) {
            try {
                logger.info("Stopping JMS listener container: {}", container.getBeanName());
                container.stop();
            } catch (Exception e) {
                logger.error("‚ùå Error stopping IBM MQ listener: {}", container.getBeanName(), e);
            }
        }
    }

    private void closeOracleConnection() {
        logger.info("üõë Closing Oracle DataSource...");
        try {
            dataSource.getConnection().close();
            logger.info("‚úÖ Oracle DataSource closed.");
        } catch (SQLException e) {
            logger.error("‚ùå Error closing Oracle DataSource", e);
        }
    }

    private void closeRedisConnection() {
        logger.info("üõë Closing Redis connection...");
        try {
            redisConnectionFactory.getConnection().close();
            logger.info("‚úÖ Redis connection closed.");
        } catch (Exception e) {
            logger.error("‚ùå Error closing Redis connection", e);
        }
    }
}
