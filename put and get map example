import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.geode.cache.Region;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class GemFireHashMapService {

    @Autowired
    private Region<String, String> myRegion; // region bean defined in config

    private final ObjectMapper objectMapper = new ObjectMapper();

    public void run() throws Exception {
        // Step 1: Create and put initial map
        Map<String, String> map1 = new HashMap<>();
        map1.put("key1", "value1");
        map1.put("key2", "value2");
        putMap("user:1", map1);

        // Step 2: Get and merge with new map
        Map<String, String> map2 = new HashMap<>();
        map2.put("key3", "value3");
        mergeAndPut("user:1", map2);

        // Step 3: Get and merge again
        Map<String, String> map3 = new HashMap<>();
        map3.put("key4", "value4");
        mergeAndPut("user:1", map3);

        // Final read
        Map<String, String> finalMap = getMap("user:1");
        System.out.println("Final Map from GemFire: " + finalMap);
    }

    private void putMap(String key, Map<String, String> map) throws Exception {
        String json = objectMapper.writeValueAsString(map);
        myRegion.put(key, json);
    }

    private Map<String, String> getMap(String key) throws Exception {
        String json = myRegion.get(key);
        if (json == null) return new HashMap<>();
        return objectMapper.readValue(json, new TypeReference<Map<String, String>>() {});
    }

    private void mergeAndPut(String key, Map<String, String> newMap) throws Exception {
        Map<String, String> existingMap = getMap(key);
        existingMap.putAll(newMap);
        putMap(key, existingMap);
    }
}
