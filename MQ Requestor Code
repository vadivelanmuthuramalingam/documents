<dependencies>
    <dependency>
        <groupId>com.ibm.mq</groupId>
        <artifactId>com.ibm.mq.allclient</artifactId>
        <version>9.3.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>




ibm:
  mq:
    queue-manager: QM1
    conn-name: myhost(1414)
    channel: DEV.APP.SVRCONN
    user: appuser
    password: pass123
    request-queue: REQUEST.QUEUE
    ssl:
      enabled: true
      cipher-suite: TLS_RSA_WITH_AES_256_CBC_SHA256
      key-store: file:/path/to/client.jks
      key-store-password: changeit
      trust-store: file:/path/to/truststore.jks
      trust-store-password: changeit



import com.ibm.mq.jms.MQConnectionFactory;
import com.ibm.msg.client.wmq.WMQConstants;
import jakarta.jms.ConnectionFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.connection.CachingConnectionFactory;
import org.springframework.jms.core.JmsTemplate;

@Configuration
public class MQConfig {

    @Value("${mq.host}")
    private String host;

    @Value("${mq.port}")
    private int port;

    @Value("${mq.queueManager}")
    private String queueManager;

    @Value("${mq.channel}")
    private String channel;

    @Value("${mq.user}")
    private String user;

    @Value("${mq.password}")
    private String password;

    @Value("${mq.ssl.cipher}")
    private String sslCipher;

    @Bean
    public ConnectionFactory mqConnectionFactory() throws Exception {
        MQConnectionFactory factory = new MQConnectionFactory();
        factory.setHostName(host);
        factory.setPort(port);
        factory.setQueueManager(queueManager);
        factory.setChannel(channel);
        factory.setTransportType(WMQConstants.WMQ_CM_CLIENT);

        factory.setSSLFipsRequired(false);
        factory.setSSLCipherSuite(sslCipher);
        factory.setStringProperty(WMQConstants.USERID, user);
        factory.setStringProperty(WMQConstants.PASSWORD, password);
        factory.setBooleanProperty(WMQConstants.USER_AUTHENTICATION_MQCSP, true);

        // Reconnection & retry
        factory.setBooleanProperty(WMQConstants.AUTO_RECONNECT, true);
        factory.setIntProperty(WMQConstants.AUTO_RECONNECT_TIMEOUT, 60);
        factory.setIntProperty(WMQConstants.RECONNECT_RETRIES, 5);
        factory.setIntProperty(WMQConstants.RECONNECT_DELAY, 1000);

        return factory;
    }

    @Bean
    public CachingConnectionFactory cachingConnectionFactory(ConnectionFactory mqConnectionFactory) {
        CachingConnectionFactory cachingFactory = new CachingConnectionFactory(mqConnectionFactory);
        cachingFactory.setSessionCacheSize(10); // You can tweak this
        cachingFactory.setReconnectOnException(true);
        return cachingFactory;
    }

    @Bean
    public JmsTemplate jmsTemplate(CachingConnectionFactory cachingConnectionFactory) {
        JmsTemplate jmsTemplate = new JmsTemplate(cachingConnectionFactory);
        jmsTemplate.setReceiveTimeout(5000); // 5 seconds timeout for reply
        return jmsTemplate;
    }
}






@Service
public class MqRequestorService {

    private final JmsTemplate jmsTemplate;

    @Value("${ibm.mq.request-queue}")
    private String requestQueue;

    public MqRequestorService(JmsTemplate jmsTemplate) {
        this.jmsTemplate = jmsTemplate;
    }

    public String sendRequest(String payload) {
    String correlationId = UUID.randomUUID().toString();
    System.out.println("Generated Correlation ID: " + correlationId);

    Message replyMsg = jmsTemplate.sendAndReceive(requestQueue, session -> {
        TextMessage message = session.createTextMessage(payload);
        message.setJMSCorrelationID(correlationId);
        System.out.println("Sending message with CorrelationID: " + correlationId);
        return message;
    });

    if (replyMsg == null) {
        System.err.println("No reply received within timeout.");
        return "No reply received.";
    }

    try {
        String receivedCorrelationId = replyMsg.getJMSCorrelationID();
        Destination replyTo = replyMsg.getJMSReplyTo();
        String replyToQueue = replyTo != null ? replyTo.toString() : "N/A";

        if (replyMsg instanceof TextMessage textMessage) {
            String replyPayload = textMessage.getText();

            System.out.println("Received reply:");
            System.out.println("  Payload        : " + replyPayload);
            System.out.println("  Correlation ID : " + receivedCorrelationId);
            System.out.println("  ReplyTo Queue  : " + replyToQueue);

            return replyPayload;
        } else {
            System.err.println("Unexpected reply type. ReplyTo: " + replyToQueue);
            return "Invalid message type received.";
        }
    } catch (JMSException e) {
        throw new RuntimeException("Failed to process reply message", e);
    }
   }

}
