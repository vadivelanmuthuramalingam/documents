<project xmlns="http://maven.apache.org/POM/4.0.0" ...>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>dynamic-multi-db</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.19.0.0</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.3.0</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.3</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <properties>
        <java.version>17</java.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>





myapp:
  datasources:
    dbs:
      oracleDb:
        url: jdbc:oracle:thin:@//oracle-host:1521/ORCL
        username: appuser
        password: appPass
        driver-class-name: oracle.jdbc.OracleDriver
        schema: SCHEMA1
        pool-size: 10

      mysqlDb:
        url: jdbc:mysql://mysql-host:3306/mydb
        username: mysqluser
        password: mysqlPass
        driver-class-name: com.mysql.cj.jdbc.Driver
        schema: mydb
        pool-size: 10




package com.example.dynamicdb.config;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

@Data
@Configuration
@ConfigurationProperties(prefix = "myapp.datasources")
public class DynamicDataSourceProperties {
    private Map<String, DataSourceConfig> dbs = new HashMap<>();

    @Data
    public static class DataSourceConfig {
        private String url;
        private String username;
        private String password;
        private String driverClassName;
        private String schema;
        private Integer poolSize;
    }
}




package com.example.dynamicdb.config;

import com.zaxxer.hikari.HikariDataSource;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.*;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.*;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
    basePackages = {"com"}, // ✅ all entities and repos under com.*
    entityManagerFactoryRef = "entityManagerFactory",
    transactionManagerRef = "transactionManager"
)
@RequiredArgsConstructor
public class DataSourceConfig {

    private final DynamicDataSourceProperties dynamicProperties;

    @Primary
    @Bean
    public DataSource routingDataSource() {
        Map<Object, Object> targetDataSources = new HashMap<>();

        dynamicProperties.getDbs().forEach((dbKey, dbConfig) -> {
            HikariDataSource ds = DataSourceBuilder.create()
                    .type(HikariDataSource.class)
                    .driverClassName(dbConfig.getDriverClassName())
                    .url(dbConfig.getUrl())
                    .username(dbConfig.getUsername())
                    .password(dbConfig.getPassword())
                    .build();

            if (dbConfig.getPoolSize() != null) {
                ds.setMaximumPoolSize(dbConfig.getPoolSize());
            }

            if (dbConfig.getSchema() != null && !dbConfig.getSchema().isEmpty()) {
                ds.setConnectionInitSql("ALTER SESSION SET CURRENT_SCHEMA = " + dbConfig.getSchema());
            }

            targetDataSources.put(dbKey, ds);
        });

        DynamicRoutingDataSource routing = new DynamicRoutingDataSource();
        routing.setTargetDataSources(targetDataSources);

        dynamicProperties.getDbs().keySet().stream().findFirst()
                .ifPresent(defaultKey -> routing.setDefaultTargetDataSource(targetDataSources.get(defaultKey)));

        return routing;
    }

    @Primary
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(
            EntityManagerFactoryBuilder builder,
            @Qualifier("routingDataSource") DataSource routingDataSource) {
        return builder
                .dataSource(routingDataSource)
                .packages("com") // ✅ all @Entity classes
                .persistenceUnit("dynamic")
                .build();
    }

    @Primary
    @Bean
    public PlatformTransactionManager transactionManager(
            @Qualifier("entityManagerFactory") EntityManagerFactory emf) {
        return new JpaTransactionManager(emf);
    }
}




DynamicRoutingDataSource.set("oracleDb");
try {
    myEntityRepository.save(...);
} finally {
    DynamicRoutingDataSource.clear();
}











package com.example.dynamicdb.annotation;

import java.lang.annotation.*;

@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface UseDataSource {
    String value();
}


package com.example.dynamicdb.aspect;

import com.example.dynamicdb.annotation.UseDataSource;
import com.example.dynamicdb.datasource.DynamicRoutingDataSource;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.stereotype.Component;

@Slf4j
@Aspect
@Component
public class DataSourceRoutingAspect {

    @Around("@annotation(com.example.dynamicdb.annotation.UseDataSource) || @within(com.example.dynamicdb.annotation.UseDataSource)")
    public Object routeDataSource(ProceedingJoinPoint joinPoint) throws Throwable {
        String dbKey = resolveDbKey(joinPoint);

        if (dbKey == null) {
            log.debug("[DynamicDB] No @UseDataSource annotation found; using default datasource.");
            return joinPoint.proceed();
        }

        try {
            log.debug("[DynamicDB] Routing to datasource '{}'", dbKey);
            DynamicRoutingDataSource.set(dbKey);
            return joinPoint.proceed();
        } finally {
            DynamicRoutingDataSource.clear();
        }
    }

    private String resolveDbKey(ProceedingJoinPoint joinPoint) {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();

        UseDataSource methodAnno = AnnotationUtils.findAnnotation(signature.getMethod(), UseDataSource.class);
        if (methodAnno != null) {
            return methodAnno.value();
        }

        UseDataSource classAnno = AnnotationUtils.findAnnotation(signature.getDeclaringType(), UseDataSource.class);
        if (classAnno != null) {
            return classAnno.value();
        }

        return null;
    }
}




package com.example.dynamicdb.service;

import com.example.dynamicdb.annotation.UseDataSource;
import com.example.dynamicdb.entity.MyEntity;
import com.example.dynamicdb.repository.MyEntityRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class MyService {

    private final MyEntityRepository myEntityRepository;

    @UseDataSource("oracleDb")
    public void saveToOracle(MyEntity entity) {
        myEntityRepository.save(entity);
    }

    @UseDataSource("mysqlDb")
    public void saveToMySQL(MyEntity entity) {
        myEntityRepository.save(entity);
    }
}
