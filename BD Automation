#!/bin/bash

# === CONFIGURATION ===
BITBUCKET_USER="your_username"
BITBUCKET_PASS="your_password_or_app_password"
BITBUCKET_WORKSPACE="your_workspace_or_project_key"
LOCAL_DIR="/path/to/local/repos"
BITBUCKET_API_URL="https://api.bitbucket.org/2.0/repositories/${BITBUCKET_WORKSPACE}"

# === SETUP ===
mkdir -p "$LOCAL_DIR"
cd "$LOCAL_DIR" || { echo "Failed to cd into $LOCAL_DIR"; exit 1; }

REPO_LIST_FILE="${LOCAL_DIR}/repos-list.txt"

# Clear the repo list file before start
> "$REPO_LIST_FILE"

url="$BITBUCKET_API_URL"

# === FETCH REPOS FROM BITBUCKET (handle pagination) ===
while [ ! -z "$url" ]; do
  echo "Fetching from URL: $url"
  
  response=$(curl -s --insecure -u "$BITBUCKET_USER:$BITBUCKET_PASS" "$url")
  
  # Extract repo slugs and append to the persistent file
  echo "$response" | grep -o '"slug": *"[^"]*"' | sed 's/"slug": *"\([^"]*\)"/\1/' >> "$REPO_LIST_FILE"
  
  # Extract next URL if exists
  next_url=$(echo "$response" | grep -o '"next": *"[^"]*"' | sed 's/"next": *"\([^"]*\)"/\1/')
  
  url="$next_url"
done

# === READ REPOS FROM FILE INTO ARRAY ===
repos=()
while IFS= read -r line; do
  repo=$(echo "$line" | xargs)  # trim whitespace
  repos+=("$repo")
done < "$REPO_LIST_FILE"

# === PROCESS EACH REPO: CLONE/UPDATE + MAVEN BUILD ===
declare -A build_results

for repo in "${repos[@]}"; do
  echo "Processing repo: $repo"
  
  if [ -d "$repo" ]; then
    echo "Updating existing repo $repo"
    cd "$repo" || { echo "Failed to cd into $repo"; continue; }
    git pull
  else
    echo "Cloning repo $repo"
    git clone "https://bitbucket.org/${BITBUCKET_WORKSPACE}/${repo}.git"
    cd "$repo" || { echo "Failed to cd into $repo after clone"; continue; }
  fi
  
  # Run Maven build skipping tests
  mvn clean install -DskipTests
  if [ $? -eq 0 ]; then
    echo "Build SUCCESS for $repo"
    build_results["$repo"]="SUCCESS"
  else
    echo "Build FAILED for $repo"
    build_results["$repo"]="FAILED"
  fi
  
  cd "$LOCAL_DIR" || { echo "Failed to cd back to $LOCAL_DIR"; exit 1; }
done

# === PRINT BUILD SUMMARY ===
echo "----- Build Summary -----"
for repo in "${!build_results[@]}"; do
  echo "$repo : ${build_results[$repo]}"
done
