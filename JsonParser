package com.example.jsonparser;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import javax.sql.DataSource;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

@SpringBootApplication
public class JsonParserApplication {
    public static void main(String[] args) {
        SpringApplication.run(JsonParserApplication.class, args);
    }

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("oracle.jdbc.OracleDriver");
        dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:orcl");
        dataSource.setUsername("your_username");
        dataSource.setPassword("your_password");
        return dataSource;
    }
}

@RestController
@RequestMapping("/json")
class JsonController {
    private final JsonProcessingService jsonProcessingService;

    public JsonController(JsonProcessingService jsonProcessingService) {
        this.jsonProcessingService = jsonProcessingService;
    }

    @PostMapping("/process")
    public String processJson(@RequestParam String clientId, @RequestBody String jsonData) {
        try {
            jsonProcessingService.processJsonStreaming(clientId, jsonData);
            return "JSON processed successfully";
        } catch (Exception e) {
            return "Error processing JSON: " + e.getMessage();
        }
    }
}

@Service
class JsonProcessingService {
    private final JdbcTemplate jdbcTemplate;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public JsonProcessingService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void processJsonStreaming(String clientId, String jsonData) throws Exception {
        JsonFactory factory = new JsonFactory();
        try (JsonParser parser = factory.createParser(new StringReader(jsonData))) {
            List<Object[]> records = new ArrayList<>();
            String currentPath = "root";
            boolean insideArray = false;
            int arrayIndex = -1;

            while (!parser.isClosed()) {
                JsonToken token = parser.nextToken();

                if (token == JsonToken.START_ARRAY) {
                    insideArray = true;
                    arrayIndex = 0;
                } else if (token == JsonToken.END_ARRAY) {
                    insideArray = false;
                    arrayIndex = -1;
                } else if (token == JsonToken.START_OBJECT) {
                    if (insideArray) {
                        currentPath = currentPath + "[" + arrayIndex + "]";
                    }
                } else if (token == JsonToken.END_OBJECT) {
                    if (insideArray) {
                        arrayIndex++;
                    }
                } else if (token == JsonToken.FIELD_NAME) {
                    currentPath = currentPath + "." + parser.getCurrentName();
                } else if (token == JsonToken.VALUE_STRING || token == JsonToken.VALUE_NUMBER_INT || token == JsonToken.VALUE_NUMBER_FLOAT) {
                    String keyPath = insideArray ? currentPath + "[" + arrayIndex + "]" : currentPath;
                    records.add(new Object[]{clientId, keyPath, parser.getText()});
                }
            }
            batchInsert(records);
        }
    }

    private void batchInsert(List<Object[]> records) {
        String sql = "INSERT INTO client_data (client_id, key_name, value) VALUES (?, ?, ?)";
        jdbcTemplate.batchUpdate(sql, records);
    }
}
